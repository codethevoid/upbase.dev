// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  avatar    String?
  email     String   @unique
  password  String?
  googleId  String?  @unique
  githubId  String?  @unique
  teams     Team[]
}

model Team {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  name              String
  requiresSignature Boolean         @default(false)
  storageObjects    StorageObject[]
  apiKeys           ApiKey[]
}

enum StorageType {
  file
  folder
}

model StorageObject {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  key         String      @unique
  size        Int?
  contentType String?
  url         String?
  storageType StorageType
  metadata    Json?
  team        Team        @relation(fields: [teamId], references: [id])
  teamId      String
  // bucket      Bucket?     @relation(fields: [bucketId], references: [id])
  // bucketId    String?
}

// model Bucket {
//   id             String          @id @default(cuid())
//   createdAt      DateTime        @default(now())
//   updatedAt      DateTime        @updatedAt
//   name           String
//   s3Name         String          @unique
//   storageObjects StorageObject[]
//   team           Team            @relation(fields: [teamId], references: [id])
//   teamId         String
//
//   @@unique([teamId, name])
// }

enum ApiKeyPermission {
  read
  write
  full
}

model ApiKey {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  lastUsedAt  DateTime?
  name        String
  secretKey   String           @unique
  publicKey   String           @unique
  origins     String[]
  expires     DateTime?
  description String?
  permissions ApiKeyPermission @default(full)
  team        Team             @relation(fields: [teamId], references: [id])
  teamId      String
}
